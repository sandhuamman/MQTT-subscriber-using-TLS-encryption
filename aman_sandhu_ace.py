# -*- coding: utf-8 -*-
"""aman sandhu-ACE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pMVR1Velc2xjHjONlPElhGVeA6pPXwJ2
"""

pip install paho-mqtt

import paho.mqtt.client as mqtt
import time
import random
import ssl

BROKER = "test.mosquitto.org"
PORT = 8883
TOPIC = "telemeter/sensors/temperature"
CLIENT_ID = "SensorPublisher"
USERNAME = "your_username"
PASSWORD = "your_password"

client = mqtt.Client(client_id=CLIENT_ID)
client.tls_set(cert_reqs=ssl.CERT_NONE)
client.tls_insecure_set(True)
client.username_pw_set(USERNAME, PASSWORD)

client.connect(BROKER, PORT, 60)

def publish_sensor_data():
    """Simulate and publish sensor data."""
    try:
        while True:
            temperature = round(random.uniform(20.0, 30.0), 2)  # Simulated temperature
            message = {"sensor_id": CLIENT_ID, "temperature": temperature, "unit": "C"}
            client.publish(TOPIC, str(message))
            print(f"Published: {message}")
            time.sleep(5)  # Publish every 5 seconds
    except KeyboardInterrupt:
        print("Stopping publisher...")
        client.disconnect()

publish_sensor_data()

import paho.mqtt.client as mqtt
import ssl

BROKER = "test.mosquitto.org"
PORT = 8883
TOPIC = "telemeter/sensors/temperature"
CLIENT_ID = "DashboardSubscriber"

client = mqtt.Client(client_id=CLIENT_ID)
client.tls_set(cert_reqs=ssl.CERT_NONE)  # Disable certificate verification
client.tls_insecure_set(True)  # Allow insecure connection

def on_connect(client, userdata, flags, rc):
    """Callback when connected to the broker."""
    print(f"Connected to broker with result code {rc}")
    client.subscribe(TOPIC)

def on_message(client, userdata, msg):
    """Callback when a message is received."""
    print(f"Received message: {msg.payload.decode()}")

client.on_connect = on_connect
client.on_message = on_message

client.connect(BROKER, PORT, 60)

client.loop_forever()

